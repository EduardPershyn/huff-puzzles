 /** 
 *  EMITTER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when the function `value(uint256, uint256)` is called, should
 *  emit an event named `Value(uint256 indexed, uint256)`
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function value(uint256, uint256) payable returns()
 
 #define event Value(uint256 indexed, uint256)


 #define macro MAIN() = takes(0) returns(0) {
    // Get the function selector
    0x00
    calldataload
    0xE0
    shr

    // Jump to the implementation of the value function if the calldata matches the function selector
    __FUNC_SIG(value) eq value jumpi

    0x00 0x00 revert

    value:
        VALUE()
}

#define macro VALUE() = takes(0) returns(0) {
    //0x24 calldataload     // load second 32 bytes onto the stack - number 2
    //0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x18
    0x2a


    __EVENT_HASH(Value)
    //__EVENT_HASH("Value(uint256 par1, uint256 par2)")
    //__FUNC_SIG(Value)
    //0xd0df8930
    0x00 0x00
    log3
}
