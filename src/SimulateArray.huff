
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

#define constant ARRAY_SLOT = FREE_STORAGE_POINTER()

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload
    0xE0 shr

    dup1 __FUNC_SIG(pushh) eq pushh jumpi
    dup1 __FUNC_SIG(popp) eq popp jumpi
    dup1 __FUNC_SIG(read) eq read jumpi
    dup1 __FUNC_SIG(length) eq length jumpi
    dup1 __FUNC_SIG(write) eq write jumpi

    0x00 0x00 revert

    pushh:
        PUSH()
    popp:
        POP()
    read:
        READ()
    length:
        LENGTH()
    write:
        WRITE()
}

#define macro PUSH() = takes(0) returns(0) {
    [ARRAY_SLOT] sload dup1            // [length, length]
    0x01 add [ARRAY_SLOT] sstore       // [length]

    [ARRAY_SLOT] 0x00 mstore
    0x20 0x00 sha3                     // [array_slot, length]

    add                                // [elem_slot]
    0x04 calldataload                  // [elem, elem_slot]
    swap1 sstore

    0x00 0x00 return
}

#define macro POP() = takes(0) returns(0) {
    [ARRAY_SLOT] sload      // [length]
    dup1 iszero rev jumpi
    0x01 swap1 sub          // [length-1]
    [ARRAY_SLOT] sstore

    0x00 0x00 return

    rev:
        __ERROR(ZeroArray)
        0x00 mstore
        0x04 0x00 revert
}

#define macro READ() = takes(0) returns(0) {
    0x04 calldataload dup1     // [index, index]
    [ARRAY_SLOT] sload         // [length, index, index]
    swap1 lt iszero rev jumpi  // [index]

    [ARRAY_SLOT] 0x00 mstore
    0x20 0x00 sha3        // [array_slot, index]
    add sload             // [elem]

    0x00 mstore
    0x20 0x00 return

    rev:
        __ERROR(OutOfBounds)
        0x00 mstore
        0x04 0x00 revert
}

#define macro LENGTH() = takes(0) returns(0) {
    [ARRAY_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro WRITE() = takes(0) returns(0) {
    0x24 calldataload
    0x04 calldataload dup1     // [index, index, number]
    [ARRAY_SLOT] sload         // [length, index, index, number]
    swap1 lt iszero rev jumpi  // [index, number]

    [ARRAY_SLOT] 0x00 mstore
    0x20 0x00 sha3             // [array_slot, index, number]
    add sstore

    0x00 0x00 return

    rev:
        __ERROR(OutOfBounds)
        0x00 mstore
        0x04 0x00 revert
}