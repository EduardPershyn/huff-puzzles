
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)

#define constant STORAGE_SLOT0 = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    // Get the function selector
    0x00
    calldataload
    0xE0
    shr

    dup1

    // Jump to the implementation of the ADD1 function if the calldata matches the function selector
    __FUNC_SIG(store) eq store jumpi
    __FUNC_SIG(read) eq read jumpi

    0x00 0x00 revert

    store:
        STORE()
    read:
        READ()
}

#define macro STORE() = takes(0) returns(0) {
    // Read uint256 from calldata, remember to read from byte 4 to allow for the function selector!
    0x04            // [0x04]
    calldataload    // [value]

    // Get pointer and store
    [STORAGE_SLOT0]         // [value_ptr, value]
    sstore          // []
}

#define macro READ() = takes(0) returns(0) {
    // Read uint256 from storage
    [STORAGE_SLOT0]         // [value_ptr]
    sload           // [value]

    // Store the return value in memory
    0x00            // [0x00, value]
    mstore          // []

    // Return the first 32 bytes of memory containing our uint256
    0x20            // [0x20]
    0x00            // [0x00, 0x20]
    return          // []
}